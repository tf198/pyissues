#!/usr/bin/env python
'''
A file based issue tracker intended to play nice with diff
'''
import sys, os

# prepend the current working directory so we can override issues_conf
sys.path.insert(0, '.')

from pyissues import conf
import argparse, pyissues, getpass, logging

logger = logging.getLogger(__name__)
    
def action_create(issues, *extra):
    parser = argparse.ArgumentParser(description="Create issue")
    for item in conf._required:
        parser.add_argument('--{0}'.format(item),
                            dest=item, default=None, help='Item {0}'.format(item))
    options = parser.parse_args(extra)
    
    issue = pyissues.Issue();
    
    print '',
    
    for item in conf._required:
        allowed = getattr(conf, item, None)
        
        value = getattr(options, item)
        
        while True:
            if value is None:
                print "{0} [{1}]: ".format(item.title(), getattr(issue, item)),
                value = sys.stdin.readline().strip()
                if value == '':
                    value = getattr(issue, item)
            
            if allowed == None or value in allowed:
                setattr(issue, item, value)
                break
            else:
                value = None
                print "Allowed options: [ {0} ]".format(', '.join(allowed))
    
    print "Issue - Ctrl D to exit.."
    issue.body = sys.stdin.read()
    
    issues.update(issue)
    
def action_list(issues, *extra):
    parser = argparse.ArgumentParser(description="List issues")
    for item in conf._index:
        default = conf._default_filters.get(item, None)
        parser.add_argument('--{0}'.format(item),
                            dest=item, default=default, help='Filter {0}'.format(item))
    parser.add_argument('--sort', '-s', dest='sort', default='-created', help='Order by field')
    options = parser.parse_args(extra)
    
    def filter_issues(x):
        for item in conf._index:
            value = getattr(options, item)
            if value and value != 'all':
                if x[item] != value:
                    return False
                
        return True
    
    print_issues(issues.filter(sort=options.sort, filter_method=filter_issues))
    
def action_show(issues, uuid):
    issue = issues.get(uuid)
    print_issue(issue)
            
def action_update(issues, uuid, field, *text):
    issue = issues.get(uuid)
    if not hasattr(issue, field):
        raise Exception("No field {0}".format(field))
    
    value = ' '.join(text)
    
    if hasattr(conf, field):
        options = getattr(conf, field)
        if not value in options:
            raise Exception("Allowed values: {0}".format(', '.join(options))) 
    
    setattr(issue, field, " ".join(text))
    issues.update(issue)
    
def action_close(issues, uuid, *extra):
    parser = argparse.ArgumentParser(description="Close issue")
    parser.add_argument('--message', '-m', help='Add comment before closing')
    options = parser.parse_args(extra)
    
    if options.message:
        action_comment(issues, uuid, options.message)
    
    action_update(issues, uuid, 'status', 'closed')

def action_comment(issues, uuid, *text):
    issue = issues.get(uuid)
    
    if len(text) == 0:
        raise Exception("No comment!")
    
    issue.add_comment(" ".join(text), getpass.getuser())
    issues.update(issue)

def action_edit(issues, uuid):
    import shutil, subprocess, json, tempfile
    
    item = issues.match(uuid)
    _, path = tempfile.mkstemp()
    shutil.copy(item, path)
    
    editor = os.getenv('EDITOR', 'vi')
    
    subprocess.call([editor, path])

    # load as issue for validation and correct outputting
    try:
        with open(path, 'r') as bob:
            data = json.load(bob)
        issue = pyissues.Issue(**data)
        
        issues.update(issue)
        logger.info("{0} updated".format(issue))
    except Exception, e:
        logger.error("Bad syntax: {0}".format(e))
    
    os.unlink(path)

def action_delete(issues, uuid):
    issues.delete(uuid)
    logger.info("Issue {0} deleted".format(uuid))
    
def action_rebuild(issues):
    c = issues.rebuild()
    logger.info("Database rebuilt ({0} issues)".format(c))

def print_issue(issue):
    data = issue.__dict__.copy()
    data['attachments'] = '\n'.join(data['attachments'])
    data['comments'] = '\n\n'.join(data['comments'])
    
    print conf._template.format(**data)

def print_issues(issues):
    template = "{0:6s} {1:30s} {2:8s} {3:8s} {4:8s} {5:10s}"
    print template.format('UUID', 'Description', 'Owner', 'Assigned', 'Priority', 'Created')
    print '-' * 75
    for i in issues:
        print template.format(i['uuid'][:6], i['description'][:30], i['owner'][:8], i['assigned'][:8], i['priority'][:8], i['created'][:10])

if __name__ == '__main__':
    
    parser = argparse.ArgumentParser(description="Text based issue tracker")
    parser.add_argument('action')
    parser.add_argument('--directory', '-d', dest='directory', default='issues', help='Directory to store issues in')
    parser.add_argument('--verbose', '-v', dest='verbose', action='store_true', help='Verbose output')
    
    options, remaining = parser.parse_known_args()
    
    level = logging.DEBUG if options.verbose else logging.INFO
    logging.basicConfig(stream=sys.stderr, level=level)

    issues = pyissues.PyIssues(options.directory)
    
    try:
        handler = globals()['action_{0}'.format(options.action)]
    except KeyError:
        raise Exception("No such action: {0}".format(options.action))
    
    try:
        handler(issues, *remaining)
    except Exception as e:
        if options.verbose:
            raise
        print "Error: {0}".format(e)
    
    issues.close()